import { Component, ComponentType, FunctionComponent, ReactElement, ReactNode, ErrorInfo, PropsWithChildren, PropsWithRef, RefAttributes, ForwardRefExoticComponent, PropsWithoutRef } from "react";
export type ErrorBoundaryContextType = {
    didCatch: boolean;
    error: any;
    resetErrorBoundary: (...args: any[]) => void;
};
export const ErrorBoundaryContext: import("react").Context<ErrorBoundaryContextType | null>;
declare function FallbackRender(props: FallbackProps): ReactNode;
export type FallbackProps = {
    error: any;
    resetErrorBoundary: (...args: any[]) => void;
};
type ErrorBoundarySharedProps = {
    onError?: (error: Error, info: {
        componentStack: string;
    }) => void;
    onReset?: (details: {
        reason: "imperative-api";
        args: any[];
    } | {
        reason: "keys";
        prev: any[] | undefined;
        next: any[] | undefined;
    }) => void;
    resetKeys?: any[];
};
export type ErrorBoundaryPropsWithComponent = ErrorBoundarySharedProps & {
    fallback?: never;
    FallbackComponent: ComponentType<FallbackProps>;
    fallbackRender?: never;
};
export type ErrorBoundaryPropsWithRender = ErrorBoundarySharedProps & {
    fallback?: never;
    FallbackComponent?: never;
    fallbackRender: typeof FallbackRender;
};
export type ErrorBoundaryPropsWithFallback = ErrorBoundarySharedProps & {
    fallback: ReactElement<unknown, string | FunctionComponent | typeof Component> | null;
    FallbackComponent?: never;
    fallbackRender?: never;
};
export type ErrorBoundaryProps = ErrorBoundaryPropsWithFallback | ErrorBoundaryPropsWithComponent | ErrorBoundaryPropsWithRender;
type ErrorBoundaryState = {
    didCatch: boolean;
    error: any;
};
export class ErrorBoundary extends Component<PropsWithRef<PropsWithChildren<ErrorBoundaryProps>>, ErrorBoundaryState> {
    state: ErrorBoundaryState;
    static getDerivedStateFromError(error: Error): {
        didCatch: boolean;
        error: Error;
    };
    resetErrorBoundary: (...args: any[]) => void;
    componentDidCatch(error: Error, info: ErrorInfo): void;
    componentDidUpdate(prevProps: ErrorBoundaryProps, prevState: ErrorBoundaryState): void;
    render(): ReactElement<any, string | import("react").JSXElementConstructor<any>>;
}
export type UseErrorBoundaryApi<Error> = {
    resetBoundary: () => void;
    showBoundary: (error: Error) => void;
};
export function useErrorBoundary<Error = any>(): UseErrorBoundaryApi<Error>;
export function withErrorBoundary<Props extends Object>(component: ComponentType<Props>, errorBoundaryProps: ErrorBoundaryProps): ForwardRefExoticComponent<PropsWithoutRef<Props> & RefAttributes<any>>;

//# sourceMappingURL=react-error-boundary.d.ts.map
