var $8zHUo$react = require("react");

function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $6d6d4999e62b3ee0$exports = {};

$parcel$export($6d6d4999e62b3ee0$exports, "ErrorBoundary", () => $6d6d4999e62b3ee0$export$e926676385687eaf);

var $4a61716688322eb0$exports = {};

$parcel$export($4a61716688322eb0$exports, "ErrorBoundaryContext", () => $4a61716688322eb0$export$b16d9fb1a22de840);

const $4a61716688322eb0$export$b16d9fb1a22de840 = (0, $8zHUo$react.createContext)(null);


const $6d6d4999e62b3ee0$var$initialState = {
    didCatch: false,
    error: null
};
class $6d6d4999e62b3ee0$export$e926676385687eaf extends (0, $8zHUo$react.Component) {
    state = $6d6d4999e62b3ee0$var$initialState;
    static getDerivedStateFromError(error) {
        return {
            didCatch: true,
            error: error
        };
    }
    resetErrorBoundary = (...args)=>{
        const { error: error  } = this.state;
        if (error !== null) {
            this.props.onReset?.({
                args: args,
                reason: "imperative-api"
            });
            this.setState($6d6d4999e62b3ee0$var$initialState);
        }
    };
    componentDidCatch(error, info) {
        this.props.onError?.(error, info);
    }
    componentDidUpdate(prevProps, prevState) {
        const { didCatch: didCatch  } = this.state;
        const { resetKeys: resetKeys  } = this.props;
        // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,
        // we'd end up resetting the error boundary immediately.
        // This would likely trigger a second error to be thrown.
        // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.
        if (didCatch && prevState.error !== null && $6d6d4999e62b3ee0$var$hasArrayChanged(prevProps.resetKeys, resetKeys)) {
            this.props.onReset?.({
                next: resetKeys,
                prev: prevProps.resetKeys,
                reason: "keys"
            });
            this.setState($6d6d4999e62b3ee0$var$initialState);
        }
    }
    render() {
        const { children: children , fallbackRender: fallbackRender , FallbackComponent: FallbackComponent , fallback: fallback  } = this.props;
        const { didCatch: didCatch , error: error  } = this.state;
        let childToRender = children;
        if (didCatch) {
            const props = {
                error: error,
                resetErrorBoundary: this.resetErrorBoundary
            };
            if ((0, $8zHUo$react.isValidElement)(fallback)) childToRender = fallback;
            else if (typeof fallbackRender === "function") childToRender = fallbackRender(props);
            else if (FallbackComponent) childToRender = (0, $8zHUo$react.createElement)(FallbackComponent, props);
            else throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
        }
        return (0, $8zHUo$react.createElement)((0, $4a61716688322eb0$export$b16d9fb1a22de840).Provider, {
            value: {
                didCatch: didCatch,
                error: error,
                resetErrorBoundary: this.resetErrorBoundary
            }
        }, childToRender);
    }
}
function $6d6d4999e62b3ee0$var$hasArrayChanged(a = [], b = []) {
    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));
}



var $3c4937b727a6fcfb$exports = {};

$parcel$export($3c4937b727a6fcfb$exports, "useErrorBoundary", () => $3c4937b727a6fcfb$export$c052f6604b7d51fe);

function $f8678e3a8e88e8a4$export$f20aa86254872370(value) {
    if (value == null || typeof value.didCatch !== "boolean" || typeof value.resetErrorBoundary !== "function") throw new Error("ErrorBoundaryContext not found");
    return true;
}



function $3c4937b727a6fcfb$export$c052f6604b7d51fe() {
    const context = (0, $8zHUo$react.useContext)((0, $4a61716688322eb0$export$b16d9fb1a22de840));
    (0, $f8678e3a8e88e8a4$export$f20aa86254872370)(context);
    const [state, setState] = (0, $8zHUo$react.useState)({
        error: null,
        hasError: false
    });
    const memoized = (0, $8zHUo$react.useMemo)(()=>({
            resetBoundary: ()=>{
                context?.resetErrorBoundary();
                setState({
                    error: null,
                    hasError: false
                });
            },
            showBoundary: (error)=>setState({
                    error: error,
                    hasError: true
                })
        }), [
        context?.resetErrorBoundary
    ]);
    if (state.hasError) throw state.error;
    return memoized;
}


var $9e88dd86e0bb2944$exports = {};

$parcel$export($9e88dd86e0bb2944$exports, "withErrorBoundary", () => $9e88dd86e0bb2944$export$f0c7a449e0cfaec7);


function $9e88dd86e0bb2944$export$f0c7a449e0cfaec7(component, errorBoundaryProps) {
    const Wrapped = (0, $8zHUo$react.forwardRef)((props, ref)=>(0, $8zHUo$react.createElement)((0, $6d6d4999e62b3ee0$export$e926676385687eaf), errorBoundaryProps, (0, $8zHUo$react.createElement)(component, {
            ...props,
            ref: ref
        })));
    // Format for display in DevTools
    const name = component.displayName || component.name || "Unknown";
    Wrapped.displayName = `withErrorBoundary(${name})`;
    return Wrapped;
}


var $faefaad95e5fcca0$exports = {};


"use client";
$parcel$exportWildcard(module.exports, $6d6d4999e62b3ee0$exports);
$parcel$exportWildcard(module.exports, $4a61716688322eb0$exports);
$parcel$exportWildcard(module.exports, $3c4937b727a6fcfb$exports);
$parcel$exportWildcard(module.exports, $9e88dd86e0bb2944$exports);
$parcel$exportWildcard(module.exports, $faefaad95e5fcca0$exports);


//# sourceMappingURL=react-error-boundary.js.map
